2+7
typeof(300000000)
typeof(30000000000000000000)
typeof(300000000)
Uint
typeof(300000000)
0x123
typeof(ans)
0x1234567
(typemin(Int32), typemax(Int32)
       
       
float32(-1.5)
typeof(ans)
0/0
500 + Inf
eps(1.0)
eps(1000.0)
eps(1000.)
eps(0.0)
2x^2-3x+1
x=3
2x^2-3x+1
1^2
2^2
1.5x^2 - .5+1
x=7
1.5x^2 - .5+1
2^2x
2(x-1)^2 - 3(x-1)+1
gnp = [1, 2, 3, 5, 8]
poverty = [0.11, 0.12, 0.13, 0.15, 0.18]
vectorgnpgnp = 0.0
vectorpovertypoverty = 0.0
vectorgnppoverty = 0.0
costheta = 0.0
n = 1.0
vectorgnpgnp = vectorgnpgnp + gnp[n]*gnp[n]
gnp[1]
n
gnp[1.5]
gnp[1.0]
gnp[1.0+eps()]
1.0+eps()
gnp[1.0+eps()]
for n = 1:length(gnp)
         vectorgnpgnp = vectorgnpgnp + gnp[n]*gnp[n]
         vectorpovertypoverty = vectorpovertypoverty + poverty[n]*poverty[n]
         vectorgnppoverty = vectorgnppoverty + gnp[n]*poverty[n]
         costheta = vectorgnppoverty / (sqrt(vectorgnpgnp)*sqrt(vectorpovertypoverty))
       end
vectorgnpgnp
vectorgnppoverty
vectorpovertypoverty
dot(gnp,gnp)
dot(poverty,poverty)
dot(gnp,poverty)
history
dot(poverty,poverty)
for n = 1:length(gnp)
         vectorgnpgnp = vectorgnpgnp + gnp[n]*gnp[n]
         vectorpovertypoverty = vectorpovertypoverty + poverty[n]*poverty[n]
         vectorgnppoverty = vectorgnppoverty + gnp[n]*poverty[n]
         costheta = vectorgnppoverty / (sqrt(vectorgnpgnp)*sqrt(vectorpovertypoverty))
       end
gnp = [1, 2, 3, 5, 8]
poverty = [0.11, 0.12, 0.13, 0.15, 0.18]
f(2,3) = x + y
function g(2,3)
       
       
function rand_uniform(a, b)
       a + rand()*(b-a)
       end
function rand_normal(mean, stdev)
       if stdev <= 0.0
           error("standard deviation must be positive")
       end
       u1 = rand()
       u2 = rand()
       r = sqrt(-2.0*log(u1))
       theta = 2.0*pi*u2
       mean + stdev*r*sin(theta)
end
foo(2,3)
function foo(a,b)
       a+b, a*b
       end
foo(2,3)
foo(1,9)
[1, 2, 3, 4] and [1; 2; 3; 4] 
[1, 2, 3, 4]
[1; 2; 3; 4] 
[1, 2, 3, 4]'
[1 2; 3 4] 
[1 2] [3 4] 
1 2] [3 4
[[1 2] [3 4]]
[[1 2]; [3 4]]
[[1 2], [3 4]]
z = (x = 1; y = 2; x + y)
z = (x=3; y=6; x+y)
z = (x=3.0; y=6.4; x+y)
z = (x=3; y=6.4; x+y)
z = (x=.3; y=6.4; x+y)
z = (x=3.3; y=6.4; x+y)
z = [x=3.3; y=6.4; x+y]
z = [x=3.3, y=6.4, x+y]
z = [x=3.3 y=6.4 x+y]
z = [x=3.3 y=6.4 x+y x-y]
z = [x=3.3 y=6.4 x+y y-x]
z = [x=3.3 y=6.4 x+y y-z]
z = [x=3.3 y=6.4, x+y y-z]
z = [x=3.3 y=6.4; x+y y-z]
z = [x=3.3 y=6.4 x+y z-y]
z = [x=3.3 y=6.4 x+y z+y]
help
function rand_uniform(a, b)
           a + rand()*(b - a)
       end
addqueen(queens::Array{Vector{Int}}, queen::Vector{Int}) = push(copy(queens), queen)
history
[1 2; 3 4] 
typr Foo
type Foo
         bar
         baz
       end
println("Foo")
println("Foo"), Foo
println(""), Foo
foo=Foo(1,2)
println(""), Foo
type Foo
         bar
         baz
       end
type Foo 
         bar
         baz
       end
foo.bar
foo.baz
foo=Foo(5,2)
foo.bar
f(x,y)=println("hi)
       f("foo",1)
       foo
       println f(x,y)
       
       end
       
       
f(x,y)=println("hi")
       f("foo",1)
       foo
       println f(x,y)
       
       end
       
       
f(x,y)=println("hi")
       f("foo",1)
       foo 
       end
       
       
f(x,y)=println("hi")
       f("foo",1)
foo.baz
f(x,y)
f(x,y)=println("hi")
       f("foo",1)
f(x,y)
f(x,y)=println("hi")
       f("foo",x)
f(x,y)
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Country.csv")
mean [1 2 2 2]
mean(2[,dim]
mean(2[,dim])
mean(2[dim])
mean(2[2,dim])
mean(2[2, dim])
mean(2 [2, dim])
mean(2 [2,2])
mean(2 [2,2,3,3])
mean(2 [2 2 3 3])
mean(v [2 2 3 3])
x = [2 2]
x=[2,2]
x=[2222]
x=[2 2 2 2 ]
x=[2 2 2 4, 4 4 4 2]
x=[2 2 2 4 ; 4 4 4 2]
x=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3]
x=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3 ; 2 2 2 2]
randn(dims)
randn(x)=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3 ; 2 2 2 2]
x=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3 ; 2 2 2 2]
randn(x)=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3 ; 2 2 2 2]
randn(x)
randn()=[2 2 2 4 ; 4 4 4 2 ; 1 2 3 3 ; 2 2 2 2]
eye(m,n)
eye(3,5)
randn(x)
randn(dims)
randn(2 3)
randn(2)
randn(2,3)
randn(2,3,3)
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Data.csv")
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Series.csv")
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Country.csv")
randn(2,3,3)
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Country.csv")
rand(2,2,2) csvread("/home/mom/dataBank/Edstats_csv/EdStats_Country.csv")
csvread("/home/mom/dataBank/Edstats_csv/EdStats_Country.csv") rand(2,2,2)
rand(2;20)
randn(2,3;20)
randn(2 3 ; 20)
randn[2 3 ; 20]
randn(2,3,3)
x = (Int=>Int)[ 1=>2, 2=>3, 4=>5 ]  
[v for (k,v) in x]
2[2]
2*4
2+45
lcm((1:20)...)
lcm((1:2)...)
lcm((11:2)...)
lcm((10:2)...)
lcm((1:3)...)
reduce((1:3)...)
reduce(lcm,1:3)
reduce(lcm,1:20)
let v=1; for x=1:20 v=lcm(v,x) end; v; end
lcm((1:20)...)
reduce(lcm,[1:20])
length(bin(reduce(*,int64(1):20)))
length(bin(reduce(*,int32(1):20)))
versioninfo()


